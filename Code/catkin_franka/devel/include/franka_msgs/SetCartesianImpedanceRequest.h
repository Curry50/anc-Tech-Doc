// Generated by gencpp from file franka_msgs/SetCartesianImpedanceRequest.msg
// DO NOT EDIT!


#ifndef FRANKA_MSGS_MESSAGE_SETCARTESIANIMPEDANCEREQUEST_H
#define FRANKA_MSGS_MESSAGE_SETCARTESIANIMPEDANCEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_msgs
{
template <class ContainerAllocator>
struct SetCartesianImpedanceRequest_
{
  typedef SetCartesianImpedanceRequest_<ContainerAllocator> Type;

  SetCartesianImpedanceRequest_()
    : cartesian_stiffness()  {
      cartesian_stiffness.assign(0.0);
  }
  SetCartesianImpedanceRequest_(const ContainerAllocator& _alloc)
    : cartesian_stiffness()  {
  (void)_alloc;
      cartesian_stiffness.assign(0.0);
  }



   typedef boost::array<double, 6>  _cartesian_stiffness_type;
  _cartesian_stiffness_type cartesian_stiffness;





  typedef boost::shared_ptr< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCartesianImpedanceRequest_

typedef ::franka_msgs::SetCartesianImpedanceRequest_<std::allocator<void> > SetCartesianImpedanceRequest;

typedef boost::shared_ptr< ::franka_msgs::SetCartesianImpedanceRequest > SetCartesianImpedanceRequestPtr;
typedef boost::shared_ptr< ::franka_msgs::SetCartesianImpedanceRequest const> SetCartesianImpedanceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator1> & lhs, const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cartesian_stiffness == rhs.cartesian_stiffness;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator1> & lhs, const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "591a43081c539ee56ec83a33587e68c4";
  }

  static const char* value(const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x591a43081c539ee5ULL;
  static const uint64_t static_value2 = 0x6ec83a33587e68c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_msgs/SetCartesianImpedanceRequest";
  }

  static const char* value(const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[6] cartesian_stiffness\n"
;
  }

  static const char* value(const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cartesian_stiffness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCartesianImpedanceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_msgs::SetCartesianImpedanceRequest_<ContainerAllocator>& v)
  {
    s << indent << "cartesian_stiffness[]" << std::endl;
    for (size_t i = 0; i < v.cartesian_stiffness.size(); ++i)
    {
      s << indent << "  cartesian_stiffness[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cartesian_stiffness[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_MSGS_MESSAGE_SETCARTESIANIMPEDANCEREQUEST_H
