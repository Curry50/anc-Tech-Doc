//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the franka_example_controllers package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __franka_example_controllers__TELEOP_PARAMCONFIG_H__
#define __franka_example_controllers__TELEOP_PARAMCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace franka_example_controllers
{
  class teleop_paramConfigStatics;

  class teleop_paramConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(teleop_paramConfig &config, const teleop_paramConfig &max, const teleop_paramConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const teleop_paramConfig &config1, const teleop_paramConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, teleop_paramConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const teleop_paramConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, teleop_paramConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const teleop_paramConfig &config) const = 0;
      virtual void getValue(const teleop_paramConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T teleop_paramConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T teleop_paramConfig::* field;

      virtual void clamp(teleop_paramConfig &config, const teleop_paramConfig &max, const teleop_paramConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const teleop_paramConfig &config1, const teleop_paramConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, teleop_paramConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const teleop_paramConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, teleop_paramConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const teleop_paramConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const teleop_paramConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, teleop_paramConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, teleop_paramConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<teleop_paramConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class CONTROLLER_GAINS
{
  public:
    CONTROLLER_GAINS()
    {
      state = true;
      name = "Controller_Gains";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("leader_damping_scaling"==(*_i)->name){leader_damping_scaling = boost::any_cast<double>(val);}
        if("follower_stiffness_scaling"==(*_i)->name){follower_stiffness_scaling = boost::any_cast<double>(val);}
      }
    }

    double leader_damping_scaling;
double follower_stiffness_scaling;

    bool state;
    std::string name;

    
}controller_gains;

class FORCE_FEEDBACK
{
  public:
    FORCE_FEEDBACK()
    {
      state = true;
      name = "Force_Feedback";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("force_feedback_idle"==(*_i)->name){force_feedback_idle = boost::any_cast<double>(val);}
        if("force_feedback_guiding"==(*_i)->name){force_feedback_guiding = boost::any_cast<double>(val);}
      }
    }

    double force_feedback_idle;
double force_feedback_guiding;

    bool state;
    std::string name;

    
}force_feedback;

class CARTESIAN_CONTACT
{
  public:
    CARTESIAN_CONTACT()
    {
      state = true;
      name = "Cartesian_Contact";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("leader_contact_force_threshold"==(*_i)->name){leader_contact_force_threshold = boost::any_cast<double>(val);}
        if("follower_contact_force_threshold"==(*_i)->name){follower_contact_force_threshold = boost::any_cast<double>(val);}
      }
    }

    double leader_contact_force_threshold;
double follower_contact_force_threshold;

    bool state;
    std::string name;

    
}cartesian_contact;

class MAX_VELOCITIES
{
  public:
    MAX_VELOCITIES()
    {
      state = true;
      name = "Max_Velocities";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class DQ_MAXLOWER
{
  public:
    DQ_MAXLOWER()
    {
      state = true;
      name = "Dq_MaxLower";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class DQ_MAX_LOWER
{
  public:
    DQ_MAX_LOWER()
    {
      state = true;
      name = "dq_max_lower";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("dq_l_1"==(*_i)->name){dq_l_1 = boost::any_cast<double>(val);}
        if("dq_l_2"==(*_i)->name){dq_l_2 = boost::any_cast<double>(val);}
        if("dq_l_3"==(*_i)->name){dq_l_3 = boost::any_cast<double>(val);}
        if("dq_l_4"==(*_i)->name){dq_l_4 = boost::any_cast<double>(val);}
        if("dq_l_5"==(*_i)->name){dq_l_5 = boost::any_cast<double>(val);}
        if("dq_l_6"==(*_i)->name){dq_l_6 = boost::any_cast<double>(val);}
        if("dq_l_7"==(*_i)->name){dq_l_7 = boost::any_cast<double>(val);}
      }
    }

    double dq_l_1;
double dq_l_2;
double dq_l_3;
double dq_l_4;
double dq_l_5;
double dq_l_6;
double dq_l_7;

    bool state;
    std::string name;

    
}dq_max_lower;

}dq_maxlower;

class DQ_MAXUPPER
{
  public:
    DQ_MAXUPPER()
    {
      state = true;
      name = "Dq_MaxUpper";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class DQ_MAX_UPPER
{
  public:
    DQ_MAX_UPPER()
    {
      state = true;
      name = "dq_max_upper";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("dq_u_1"==(*_i)->name){dq_u_1 = boost::any_cast<double>(val);}
        if("dq_u_2"==(*_i)->name){dq_u_2 = boost::any_cast<double>(val);}
        if("dq_u_3"==(*_i)->name){dq_u_3 = boost::any_cast<double>(val);}
        if("dq_u_4"==(*_i)->name){dq_u_4 = boost::any_cast<double>(val);}
        if("dq_u_5"==(*_i)->name){dq_u_5 = boost::any_cast<double>(val);}
        if("dq_u_6"==(*_i)->name){dq_u_6 = boost::any_cast<double>(val);}
        if("dq_u_7"==(*_i)->name){dq_u_7 = boost::any_cast<double>(val);}
      }
    }

    double dq_u_1;
double dq_u_2;
double dq_u_3;
double dq_u_4;
double dq_u_5;
double dq_u_6;
double dq_u_7;

    bool state;
    std::string name;

    
}dq_max_upper;

}dq_maxupper;

}max_velocities;

class MAX_ACCELERATION
{
  public:
    MAX_ACCELERATION()
    {
      state = true;
      name = "Max_Acceleration";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class DDQ_MAXLOWER
{
  public:
    DDQ_MAXLOWER()
    {
      state = true;
      name = "Ddq_MaxLower";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class DDQ_MAX_LOWER
{
  public:
    DDQ_MAX_LOWER()
    {
      state = true;
      name = "ddq_max_lower";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("ddq_l_1"==(*_i)->name){ddq_l_1 = boost::any_cast<double>(val);}
        if("ddq_l_2"==(*_i)->name){ddq_l_2 = boost::any_cast<double>(val);}
        if("ddq_l_3"==(*_i)->name){ddq_l_3 = boost::any_cast<double>(val);}
        if("ddq_l_4"==(*_i)->name){ddq_l_4 = boost::any_cast<double>(val);}
        if("ddq_l_5"==(*_i)->name){ddq_l_5 = boost::any_cast<double>(val);}
        if("ddq_l_6"==(*_i)->name){ddq_l_6 = boost::any_cast<double>(val);}
        if("ddq_l_7"==(*_i)->name){ddq_l_7 = boost::any_cast<double>(val);}
      }
    }

    double ddq_l_1;
double ddq_l_2;
double ddq_l_3;
double ddq_l_4;
double ddq_l_5;
double ddq_l_6;
double ddq_l_7;

    bool state;
    std::string name;

    
}ddq_max_lower;

}ddq_maxlower;

class DDQ_MAXUPPER
{
  public:
    DDQ_MAXUPPER()
    {
      state = true;
      name = "Ddq_MaxUpper";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class DDQ_MAX_UPPER
{
  public:
    DDQ_MAX_UPPER()
    {
      state = true;
      name = "ddq_max_upper";
    }

    void setParams(teleop_paramConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("ddq_u_1"==(*_i)->name){ddq_u_1 = boost::any_cast<double>(val);}
        if("ddq_u_2"==(*_i)->name){ddq_u_2 = boost::any_cast<double>(val);}
        if("ddq_u_3"==(*_i)->name){ddq_u_3 = boost::any_cast<double>(val);}
        if("ddq_u_4"==(*_i)->name){ddq_u_4 = boost::any_cast<double>(val);}
        if("ddq_u_5"==(*_i)->name){ddq_u_5 = boost::any_cast<double>(val);}
        if("ddq_u_6"==(*_i)->name){ddq_u_6 = boost::any_cast<double>(val);}
        if("ddq_u_7"==(*_i)->name){ddq_u_7 = boost::any_cast<double>(val);}
      }
    }

    double ddq_u_1;
double ddq_u_2;
double ddq_u_3;
double ddq_u_4;
double ddq_u_5;
double ddq_u_6;
double ddq_u_7;

    bool state;
    std::string name;

    
}ddq_max_upper;

}ddq_maxupper;

}max_acceleration;

}groups;



//#line 9 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double leader_damping_scaling;
//#line 12 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double follower_stiffness_scaling;
//#line 18 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double force_feedback_idle;
//#line 21 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double force_feedback_guiding;
//#line 26 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double leader_contact_force_threshold;
//#line 30 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double follower_contact_force_threshold;
//#line 39 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_1;
//#line 40 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_2;
//#line 41 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_3;
//#line 42 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_4;
//#line 43 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_5;
//#line 44 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_6;
//#line 45 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_l_7;
//#line 49 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_1;
//#line 50 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_2;
//#line 51 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_3;
//#line 52 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_4;
//#line 53 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_5;
//#line 54 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_6;
//#line 55 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double dq_u_7;
//#line 60 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_1;
//#line 61 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_2;
//#line 62 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_3;
//#line 63 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_4;
//#line 64 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_5;
//#line 65 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_6;
//#line 66 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_l_7;
//#line 70 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_1;
//#line 71 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_2;
//#line 72 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_3;
//#line 73 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_4;
//#line 74 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_5;
//#line 75 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_6;
//#line 76 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      double ddq_u_7;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("teleop_paramConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const teleop_paramConfig &__max__ = __getMax__();
      const teleop_paramConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const teleop_paramConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const teleop_paramConfig &__getDefault__();
    static const teleop_paramConfig &__getMax__();
    static const teleop_paramConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const teleop_paramConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void teleop_paramConfig::ParamDescription<std::string>::clamp(teleop_paramConfig &config, const teleop_paramConfig &max, const teleop_paramConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class teleop_paramConfigStatics
  {
    friend class teleop_paramConfig;

    teleop_paramConfigStatics()
    {
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT, teleop_paramConfig> Default("Default", "", 0, 0, true, &teleop_paramConfig::groups);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::CONTROLLER_GAINS, teleop_paramConfig::DEFAULT> Controller_Gains("Controller_Gains", "apply", 0, 1, true, &teleop_paramConfig::DEFAULT::controller_gains);
//#line 9 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.leader_damping_scaling = 0.0;
//#line 9 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.leader_damping_scaling = 8.0;
//#line 9 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.leader_damping_scaling = 1.0;
//#line 9 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      Controller_Gains.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("leader_damping_scaling", "double", 0, "Factor to be multiplied with initial leader d_gains", "", &teleop_paramConfig::leader_damping_scaling)));
//#line 9 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("leader_damping_scaling", "double", 0, "Factor to be multiplied with initial leader d_gains", "", &teleop_paramConfig::leader_damping_scaling)));
//#line 12 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.follower_stiffness_scaling = 0.1;
//#line 12 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.follower_stiffness_scaling = 1.3;
//#line 12 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.follower_stiffness_scaling = 1.0;
//#line 12 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      Controller_Gains.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("follower_stiffness_scaling", "double", 0, "Factor to be multiplied with initial p-gains of follower arm, damping will also be adapted", "", &teleop_paramConfig::follower_stiffness_scaling)));
//#line 12 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("follower_stiffness_scaling", "double", 0, "Factor to be multiplied with initial p-gains of follower arm, damping will also be adapted", "", &teleop_paramConfig::follower_stiffness_scaling)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Controller_Gains.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::CONTROLLER_GAINS, teleop_paramConfig::DEFAULT>(Controller_Gains)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::CONTROLLER_GAINS, teleop_paramConfig::DEFAULT>(Controller_Gains)));
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::FORCE_FEEDBACK, teleop_paramConfig::DEFAULT> Force_Feedback("Force_Feedback", "", 0, 2, true, &teleop_paramConfig::DEFAULT::force_feedback);
//#line 18 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.force_feedback_idle = 0.0;
//#line 18 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.force_feedback_idle = 1.0;
//#line 18 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.force_feedback_idle = 0.5;
//#line 18 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      Force_Feedback.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("force_feedback_idle", "double", 0, "Applied feedback force when leader arm is idle", "", &teleop_paramConfig::force_feedback_idle)));
//#line 18 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("force_feedback_idle", "double", 0, "Applied feedback force when leader arm is idle", "", &teleop_paramConfig::force_feedback_idle)));
//#line 21 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.force_feedback_guiding = 0.0;
//#line 21 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.force_feedback_guiding = 1.0;
//#line 21 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.force_feedback_guiding = 0.98;
//#line 21 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      Force_Feedback.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("force_feedback_guiding", "double", 0, "Applied feedback force when leader arm is guided", "", &teleop_paramConfig::force_feedback_guiding)));
//#line 21 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("force_feedback_guiding", "double", 0, "Applied feedback force when leader arm is guided", "", &teleop_paramConfig::force_feedback_guiding)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Force_Feedback.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::FORCE_FEEDBACK, teleop_paramConfig::DEFAULT>(Force_Feedback)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::FORCE_FEEDBACK, teleop_paramConfig::DEFAULT>(Force_Feedback)));
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::CARTESIAN_CONTACT, teleop_paramConfig::DEFAULT> Cartesian_Contact("Cartesian_Contact", "", 0, 3, true, &teleop_paramConfig::DEFAULT::cartesian_contact);
//#line 26 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.leader_contact_force_threshold = 0.1;
//#line 26 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.leader_contact_force_threshold = 10.0;
//#line 26 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.leader_contact_force_threshold = 4.0;
//#line 26 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      Cartesian_Contact.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("leader_contact_force_threshold", "double", 0, "Force threshold at leader endeffector to determine whether the arm is in contact.", "", &teleop_paramConfig::leader_contact_force_threshold)));
//#line 26 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("leader_contact_force_threshold", "double", 0, "Force threshold at leader endeffector to determine whether the arm is in contact.", "", &teleop_paramConfig::leader_contact_force_threshold)));
//#line 30 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.follower_contact_force_threshold = 0.1;
//#line 30 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.follower_contact_force_threshold = 10.0;
//#line 30 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.follower_contact_force_threshold = 5.0;
//#line 30 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      Cartesian_Contact.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("follower_contact_force_threshold", "double", 0, "Force threshold at follower endeffector to determine whether the arm is in contact.", "", &teleop_paramConfig::follower_contact_force_threshold)));
//#line 30 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("follower_contact_force_threshold", "double", 0, "Force threshold at follower endeffector to determine whether the arm is in contact.", "", &teleop_paramConfig::follower_contact_force_threshold)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Cartesian_Contact.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::CARTESIAN_CONTACT, teleop_paramConfig::DEFAULT>(Cartesian_Contact)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::CARTESIAN_CONTACT, teleop_paramConfig::DEFAULT>(Cartesian_Contact)));
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES, teleop_paramConfig::DEFAULT> Max_Velocities("Max_Velocities", "", 0, 4, true, &teleop_paramConfig::DEFAULT::max_velocities);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES> Dq_MaxLower("Dq_MaxLower", "tab", 4, 5, true, &teleop_paramConfig::DEFAULT::MAX_VELOCITIES::dq_maxlower);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER::DQ_MAX_LOWER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER> dq_max_lower("dq_max_lower", "apply", 5, 6, true, &teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER::dq_max_lower);
//#line 39 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_1 = 0.1;
//#line 39 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_1 = 2.17;
//#line 39 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_1 = 0.8;
//#line 39 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_1", "double", 0, "Description", "", &teleop_paramConfig::dq_l_1)));
//#line 39 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_1", "double", 0, "Description", "", &teleop_paramConfig::dq_l_1)));
//#line 40 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_2 = 0.1;
//#line 40 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_2 = 2.17;
//#line 40 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_2 = 0.8;
//#line 40 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_2", "double", 0, "Description", "", &teleop_paramConfig::dq_l_2)));
//#line 40 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_2", "double", 0, "Description", "", &teleop_paramConfig::dq_l_2)));
//#line 41 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_3 = 0.1;
//#line 41 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_3 = 2.17;
//#line 41 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_3 = 0.8;
//#line 41 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_3", "double", 0, "Description", "", &teleop_paramConfig::dq_l_3)));
//#line 41 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_3", "double", 0, "Description", "", &teleop_paramConfig::dq_l_3)));
//#line 42 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_4 = 0.1;
//#line 42 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_4 = 2.17;
//#line 42 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_4 = 0.8;
//#line 42 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_4", "double", 0, "Description", "", &teleop_paramConfig::dq_l_4)));
//#line 42 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_4", "double", 0, "Description", "", &teleop_paramConfig::dq_l_4)));
//#line 43 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_5 = 0.1;
//#line 43 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_5 = 2.6;
//#line 43 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_5 = 2.5;
//#line 43 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_5", "double", 0, "Description", "", &teleop_paramConfig::dq_l_5)));
//#line 43 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_5", "double", 0, "Description", "", &teleop_paramConfig::dq_l_5)));
//#line 44 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_6 = 0.1;
//#line 44 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_6 = 2.6;
//#line 44 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_6 = 2.5;
//#line 44 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_6", "double", 0, "Description", "", &teleop_paramConfig::dq_l_6)));
//#line 44 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_6", "double", 0, "Description", "", &teleop_paramConfig::dq_l_6)));
//#line 45 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_l_7 = 0.1;
//#line 45 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_l_7 = 2.6;
//#line 45 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_l_7 = 2.5;
//#line 45 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_7", "double", 0, "Description", "", &teleop_paramConfig::dq_l_7)));
//#line 45 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_l_7", "double", 0, "Description", "", &teleop_paramConfig::dq_l_7)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      dq_max_lower.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dq_MaxLower.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER::DQ_MAX_LOWER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER>(dq_max_lower)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER::DQ_MAX_LOWER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER>(dq_max_lower)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dq_MaxLower.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Max_Velocities.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES>(Dq_MaxLower)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXLOWER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES>(Dq_MaxLower)));
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES> Dq_MaxUpper("Dq_MaxUpper", "tab", 4, 7, true, &teleop_paramConfig::DEFAULT::MAX_VELOCITIES::dq_maxupper);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER::DQ_MAX_UPPER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER> dq_max_upper("dq_max_upper", "apply", 7, 8, true, &teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER::dq_max_upper);
//#line 49 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_1 = 0.1;
//#line 49 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_1 = 2.17;
//#line 49 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_1 = 2.0;
//#line 49 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_1", "double", 0, "Description", "", &teleop_paramConfig::dq_u_1)));
//#line 49 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_1", "double", 0, "Description", "", &teleop_paramConfig::dq_u_1)));
//#line 50 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_2 = 0.1;
//#line 50 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_2 = 2.17;
//#line 50 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_2 = 2.0;
//#line 50 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_2", "double", 0, "Description", "", &teleop_paramConfig::dq_u_2)));
//#line 50 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_2", "double", 0, "Description", "", &teleop_paramConfig::dq_u_2)));
//#line 51 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_3 = 0.1;
//#line 51 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_3 = 2.17;
//#line 51 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_3 = 2.0;
//#line 51 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_3", "double", 0, "Description", "", &teleop_paramConfig::dq_u_3)));
//#line 51 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_3", "double", 0, "Description", "", &teleop_paramConfig::dq_u_3)));
//#line 52 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_4 = 0.1;
//#line 52 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_4 = 2.17;
//#line 52 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_4 = 2.0;
//#line 52 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_4", "double", 0, "Description", "", &teleop_paramConfig::dq_u_4)));
//#line 52 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_4", "double", 0, "Description", "", &teleop_paramConfig::dq_u_4)));
//#line 53 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_5 = 0.1;
//#line 53 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_5 = 2.6;
//#line 53 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_5 = 2.5;
//#line 53 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_5", "double", 0, "Description", "", &teleop_paramConfig::dq_u_5)));
//#line 53 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_5", "double", 0, "Description", "", &teleop_paramConfig::dq_u_5)));
//#line 54 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_6 = 0.1;
//#line 54 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_6 = 2.6;
//#line 54 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_6 = 2.5;
//#line 54 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_6", "double", 0, "Description", "", &teleop_paramConfig::dq_u_6)));
//#line 54 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_6", "double", 0, "Description", "", &teleop_paramConfig::dq_u_6)));
//#line 55 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.dq_u_7 = 0.1;
//#line 55 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.dq_u_7 = 2.6;
//#line 55 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.dq_u_7 = 2.5;
//#line 55 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      dq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_7", "double", 0, "Description", "", &teleop_paramConfig::dq_u_7)));
//#line 55 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("dq_u_7", "double", 0, "Description", "", &teleop_paramConfig::dq_u_7)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      dq_max_upper.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dq_MaxUpper.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER::DQ_MAX_UPPER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER>(dq_max_upper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER::DQ_MAX_UPPER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER>(dq_max_upper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Dq_MaxUpper.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Max_Velocities.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES>(Dq_MaxUpper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES::DQ_MAXUPPER, teleop_paramConfig::DEFAULT::MAX_VELOCITIES>(Dq_MaxUpper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Max_Velocities.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES, teleop_paramConfig::DEFAULT>(Max_Velocities)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_VELOCITIES, teleop_paramConfig::DEFAULT>(Max_Velocities)));
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION, teleop_paramConfig::DEFAULT> Max_Acceleration("Max_Acceleration", "", 0, 9, true, &teleop_paramConfig::DEFAULT::max_acceleration);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION> Ddq_MaxLower("Ddq_MaxLower", "tab", 9, 10, true, &teleop_paramConfig::DEFAULT::MAX_ACCELERATION::ddq_maxlower);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER::DDQ_MAX_LOWER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER> ddq_max_lower("ddq_max_lower", "apply", 10, 11, true, &teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER::ddq_max_lower);
//#line 60 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_1 = 0.1;
//#line 60 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_1 = 15.0;
//#line 60 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_1 = 0.8;
//#line 60 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_1", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_1)));
//#line 60 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_1", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_1)));
//#line 61 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_2 = 0.1;
//#line 61 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_2 = 7.5;
//#line 61 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_2 = 0.8;
//#line 61 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_2", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_2)));
//#line 61 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_2", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_2)));
//#line 62 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_3 = 0.1;
//#line 62 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_3 = 10.0;
//#line 62 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_3 = 0.8;
//#line 62 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_3", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_3)));
//#line 62 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_3", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_3)));
//#line 63 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_4 = 0.1;
//#line 63 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_4 = 12.5;
//#line 63 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_4 = 0.8;
//#line 63 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_4", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_4)));
//#line 63 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_4", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_4)));
//#line 64 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_5 = 0.1;
//#line 64 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_5 = 15.0;
//#line 64 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_5 = 10.0;
//#line 64 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_5", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_5)));
//#line 64 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_5", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_5)));
//#line 65 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_6 = 0.1;
//#line 65 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_6 = 20.0;
//#line 65 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_6 = 10.0;
//#line 65 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_6", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_6)));
//#line 65 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_6", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_6)));
//#line 66 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_l_7 = 0.1;
//#line 66 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_l_7 = 20.0;
//#line 66 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_l_7 = 10.0;
//#line 66 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_lower.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_7", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_7)));
//#line 66 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_l_7", "double", 0, "Description", "", &teleop_paramConfig::ddq_l_7)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      ddq_max_lower.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Ddq_MaxLower.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER::DDQ_MAX_LOWER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER>(ddq_max_lower)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER::DDQ_MAX_LOWER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER>(ddq_max_lower)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Ddq_MaxLower.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Max_Acceleration.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION>(Ddq_MaxLower)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXLOWER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION>(Ddq_MaxLower)));
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION> Ddq_MaxUpper("Ddq_MaxUpper", "tab", 9, 12, true, &teleop_paramConfig::DEFAULT::MAX_ACCELERATION::ddq_maxupper);
teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER::DDQ_MAX_UPPER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER> ddq_max_upper("ddq_max_upper", "apply", 12, 13, true, &teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER::ddq_max_upper);
//#line 70 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_1 = 0.1;
//#line 70 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_1 = 15.0;
//#line 70 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_1 = 6.0;
//#line 70 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_1", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_1)));
//#line 70 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_1", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_1)));
//#line 71 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_2 = 0.1;
//#line 71 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_2 = 7.5;
//#line 71 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_2 = 6.0;
//#line 71 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_2", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_2)));
//#line 71 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_2", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_2)));
//#line 72 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_3 = 0.1;
//#line 72 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_3 = 10.0;
//#line 72 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_3 = 6.0;
//#line 72 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_3", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_3)));
//#line 72 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_3", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_3)));
//#line 73 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_4 = 0.1;
//#line 73 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_4 = 12.5;
//#line 73 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_4 = 6.0;
//#line 73 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_4", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_4)));
//#line 73 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_4", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_4)));
//#line 74 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_5 = 0.1;
//#line 74 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_5 = 15.0;
//#line 74 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_5 = 15.0;
//#line 74 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_5", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_5)));
//#line 74 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_5", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_5)));
//#line 75 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_6 = 0.1;
//#line 75 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_6 = 20.0;
//#line 75 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_6 = 20.0;
//#line 75 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_6", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_6)));
//#line 75 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_6", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_6)));
//#line 76 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __min__.ddq_u_7 = 0.1;
//#line 76 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __max__.ddq_u_7 = 20.0;
//#line 76 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __default__.ddq_u_7 = 20.0;
//#line 76 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      ddq_max_upper.abstract_parameters.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_7", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_7)));
//#line 76 "/home/anc/catkin_franka/src/franka_ros/franka_example_controllers/cfg/teleop_param.cfg"
      __param_descriptions__.push_back(teleop_paramConfig::AbstractParamDescriptionConstPtr(new teleop_paramConfig::ParamDescription<double>("ddq_u_7", "double", 0, "Description", "", &teleop_paramConfig::ddq_u_7)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      ddq_max_upper.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Ddq_MaxUpper.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER::DDQ_MAX_UPPER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER>(ddq_max_upper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER::DDQ_MAX_UPPER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER>(ddq_max_upper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Ddq_MaxUpper.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Max_Acceleration.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION>(Ddq_MaxUpper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION::DDQ_MAXUPPER, teleop_paramConfig::DEFAULT::MAX_ACCELERATION>(Ddq_MaxUpper)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Max_Acceleration.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION, teleop_paramConfig::DEFAULT>(Max_Acceleration)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT::MAX_ACCELERATION, teleop_paramConfig::DEFAULT>(Max_Acceleration)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(teleop_paramConfig::AbstractGroupDescriptionConstPtr(new teleop_paramConfig::GroupDescription<teleop_paramConfig::DEFAULT, teleop_paramConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<teleop_paramConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<teleop_paramConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<teleop_paramConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    teleop_paramConfig __max__;
    teleop_paramConfig __min__;
    teleop_paramConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const teleop_paramConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static teleop_paramConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &teleop_paramConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const teleop_paramConfig &teleop_paramConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const teleop_paramConfig &teleop_paramConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const teleop_paramConfig &teleop_paramConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<teleop_paramConfig::AbstractParamDescriptionConstPtr> &teleop_paramConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<teleop_paramConfig::AbstractGroupDescriptionConstPtr> &teleop_paramConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const teleop_paramConfigStatics *teleop_paramConfig::__get_statics__()
  {
    const static teleop_paramConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = teleop_paramConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __TELEOP_PARAMRECONFIGURATOR_H__
